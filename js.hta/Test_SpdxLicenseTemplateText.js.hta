<html>

<head>
<title>Test_SpdxLicenseTemplateText.js.hta</title>

<meta http-equiv="msthemecompatible" content="yes">

<hta:application innerborder="no" scroll="no" />

<script language="jscript">
<!--
//
// Copyright (c) 2020,2023 Koki Takeyama
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

//
// SPDX License List Matching Guidelines, v2.3
// https://spdx.github.io/spdx-spec/v2.3/license-matching-guidelines-and-templates/
//

function GetMatchingText(TemplateText) {
    if (TemplateText == "") { return ""; }
    
    // B.15.3 Legacy Text Template format
    //var Pattern = "(?:" + 
    //    "<<var;name=\"([^\"]+)\";original=\"(.+)\";match=\"(.+)\">>" + "|" +
    //    "<<beginOptional>>([^<]+)<<endOptional>>" + ")";
    var Pattern = "(?:<<var;name=\"([^\"]+)\";original=\"|<<beginOptional>>)";
    
    if (! RegExp_Test(TemplateText, Pattern, true, false)) {
        return GetSimpleMatchingPattern(TemplateText);
    }
    
    var Matches;
    Matches = RegExp_Execute(TemplateText, Pattern, true, false, false);
    
    var Match;
    Match = Matches[0];
    
    var Match_FirstIndex;
    Match_FirstIndex = TemplateText.indexOf(Match);
    
    var SubMatch1;
    //var SubMatch2;
    //var SubMatch3;
    //var SubMatch4;
    SubMatch1 = Matches[1];
    //SubMatch2 = Matches[2];
    //SubMatch3 = Matches[3];
    //SubMatch4 = Matches[4];
    
    var PreviousPattern = "";
    if (Match_FirstIndex > 0) {
        var PreviousText;
        PreviousText = TemplateText.substr(0, Match_FirstIndex);
        PreviousPattern = GetSimpleMatchingPattern(PreviousText);
    }
    
    var MiddlePattern = "";
    var MiddleTextTemp = "";
    var PostPattern = "";
    var PostTextTemp = "";
    
    if (SubMatch1 != "") {
        // B.3.4 Guideline: replaceable text
        // B.8 Bullets and numbering
        // B.11 Copyright notice
        // <<var;name="([^"]+)";original="(.+)";match="(.+)">>
        
        //var VarName;
        //var VarOriginal;
        //var VarMatch;
        //VarName = SubMatch1;
        //VarOriginal = SubMatch2;
        //VarMatch = SubMatch3;
        
        //MiddlePattern = VarMatch;
        
        //if (Match_FirstIndex + Match.length < TemplateText.length) {
        //    PostTextTemp =
        //        TemplateText.substr(Match_FirstIndex + Match.length);
        //    PostPattern = GetMatchingText(PostTextTemp);
        //}
        
        var VarMatchPos;
        var VarEndPos = -1;
        
        VarMatchPos =
            TemplateText.indexOf(
                "\";match=\"", 
                Match_FirstIndex + Match.length);
        
        if (VarMatchPos >= 0) {
            VarEndPos =
                TemplateText.indexOf(
                    "\">>",
                    VarMatchPos + "\";match=\"".length);
        }
        
        if (VarEndPos >= 0) {
            MiddleTextTemp =
                TemplateText.substr(
                    VarMatchPos + "\";match=\"".length,
                    VarEndPos - (VarMatchPos + "\";match=\"".length));
            MiddlePattern = MiddleTextTemp;
            
            if (VarEndPos + "\">>".length < TemplateText.length) {
                PostTextTemp = TemplateText.substr(VarEndPos + "\">>".length);
                PostPattern = GetMatchingText(PostTextTemp);
            }
            
        }
        
    } else {
        // B.3.5 Guideline: omittable text
        // B.12 License name or title
        // B.13 Extraneous text at the end of a license
        // "<<beginOptional>>(.+)<<endOptional>>"
        
        //var OptText;
        //OptText = SubMatch4;
        
        //var OptPattern;
        //OptPattern = GetMatchingPattern(OptText);
        
        //MiddlePattern = "(?:" + OptPattern + ")?";
        
        //if (Match_FirstIndex + Match.length < TemplateText.length) {
        //    PostTextTemp =
        //        TemplateText.substr(Match_FirstIndex + Match.length);
        //    PostPattern = GetMatchingText(PostTextTemp);
        //}
        
        var EndOptionalPos;
        //EndOptionalPos =
        //    TemplateText.indexOf(
        //        "<<endOptional>>",
        //        Match_FirstIndex + Match.length);
        EndOptionalPos =
            GetEndOptionalPos(
                Match_FirstIndex + Match.length,
                TemplateText)
        if (EndOptionalPos >= 0) {
            MiddleTextTemp =
                TemplateText.substr(
                    Match_FirstIndex + Match.length,
                    EndOptionalPos - (Match_FirstIndex + Match.length));
            MiddleText = "(?:" + GetMatchingText(MiddleTextTemp) + ")?";
            
            if (EndOptionalPos + "<<endOptional>>".length <
                TemplateText.length) {
                PostTextTemp =
                    TemplateText.substr(
                        EndOptionalPos + "<<endOptional>>".length);
                PostPattern = GetMatchingText(PostTextTemp);
            }
            
        }
        
    }
    
    return PreviousPattern + MiddlePattern + PostPattern;
}

function GetEndOptionalPos(StartPos, TemplateText) {
    var BeginOptionalPos;
    BeginOptionalPos = TemplateText.indexOf("<<beginOptional>>", StartPos);
    
    var EndOptionalPos;
    EndOptionalPos = TemplateText.indexOf("<<endOptional>>", StartPos);
    
    if (BeginOptionalPos < 0) {
        return EndOptionalPos;
    }
    
    if (BeginOptionalPos > EndOptionalPos) {
        return EndOptionalPos;
    }
    
    var EndOptionalPosTemp;
    EndOptionalPosTemp =
        GetEndOptionalPos(
            BeginOptionalPos + "<<beginOptional>>".length,
            TemplateText);
    
    EndOptionalPos =
        GetEndOptionalPos(
            EndOptionalPosTemp + "<<endOptional>>".length,
            TemplateText);
    
    return EndOptionalPos;
}

//
// Copyright (c) 2020,2022 Koki Takeyama
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

//
// SPDX License List Matching Guidelines, v2.1
// https://spdx.org/spdx-license-list/matching-guidelines
//

function GetSimpleMatchingPattern(LicenseText) {
    var TempString;
    TempString = LicenseText.toLowerCase();
    
    // 3. Whitespace
    // 5. Punctuation
    // 5.1.1 Guideline: Punctuation
    // 5.1.2 Guideline: Hyphens, Dashes
    // 5.1.3 Guideline: Quotes
    // 6. Code Comment Indicators
    TempString = RegExpReplace(TempString, "\\W*", "\\W+");
    
    // 8. Varietal Word Spelling
    TempString = RegExpReplaceWords(TempString);
    
    // 13. HTTP Protocol
    TempString = RegExpReplace(TempString, "https?", "https?");
    
    return TempString;
}

//
// 8. Varietal Word Spelling
//
// | Word1 | Word2 | MatchingPattern |
// | --- | --- | --- |
// | acknowledgement | acknowledgment | acknowledge?ment |
// | analog | analogue | analog(?:ue)? |
// | analyze | analyse | analy[zs]e |
// | artifact | artefact | art[ie]fact |
// | authorization | authorisation | authori[zs]ation |
// | authorized | authorised | authori[zs]ed |
// | caliber | calibre | calib(?:er|re) |
// | canceled | cancelled | cancell?ed |
// | capitalizations | capitalisations | capitali[zs]ations |
// | catalog | catalogue | catalog(?:ue)? |
// | categorize | categorise | categori[zs]e |
// | center | centre | cent(?:er|re) |
// | copyright holder | copyright owner | copyright\W+(?:hold|own)er |
// | emphasized | emphasised | emphasi[zs]ed |
// | favor | favour | favou?r |
// | favorite | favourite | favou?rite |
// | fulfill | fulfil | fulfill? |
// | fulfillment | fulfilment | fulfill?ment |
// | Initialize | initialise | initiali[zs]e |
// | judgement | judgment | judge?ment |
// | labeling | labelling | labell?ing |
// | labor | labour | labou?r |
// | license | licence | licen[sc]e |
// | maximize | maximise | maximi[zs]e |
// | modeled | modelled | modell?ed |
// | modeling | modelling | modell?ing |
// | noncommercial | non-commercial | non-?commercial |
// | offense | offence | offen[sc]e |
// | optimize | optimise | optimi[zs]e |
// | organization | organisation | organi[zs]ation |
// | organize | organise | organi[zs]e |
// | percent | per cent | per\s*cent |
// | practice | practise | practi[cs]e |
// | program | programme | program(?:me)? |
// | realize | realise | reali[zs]e |
// | Recognize | recognise | recogni[zs]e |
// | signaling | signalling | signall?ing |
// | sublicense | sub-license | sub(?: |-)?licen[sc]e |
// | sub-license | sub license | sub(?: |-)?licen[sc]e |
// | sublicense | sub license | sub(?: |-)?licen[sc]e |
// | utilization | utilisation | utili[zs]ation |
// | while | whilst | whil(?:e|st) |
// | wilfull | wilful | wilfull? |
//

function RegExpReplaceWords(SourceString) {
    var ResultString;
    ResultString = SourceString;
    
    var PatternAndReplaceStringArray;
    PatternAndReplaceStringArray = new Array(
        "sub\W*licen[sc]e",
        "acknowledge?ment", "analog(?:ue)?", "analy[zs]e",
        "art[ie]fact", "authori[zs]ation", "authori[zs]ed",
        "calib(?:er|re)", "cancell?ed", "capitali[zs]ations",
        "catalog(?:ue)?", "categori[zs]e", "cent(?:er|re)",
        "copyright\W+(?:hold|own)er", "emphasi[zs]ed",
        "favou?r", "favou?rite", "fulfill?",
        "fulfill?ment", "initiali[zs]e", "judge?ment",
        "labell?ing", "labou?r", "licen[sc]e",
        "maximi[zs]e", "modell?ed", "modell?ing",
        "non\W*commercial", "offen[sc]e", "optimi[zs]e",
        "organi[zs]ation", "organi[zs]e",
        "per\s*cent", "practi[cs]e", "program(?:me)?",
        "reali[zs]e", "recogni[zs]e", "signall?ing",
        "utili[zs]ation", "whil(?:e|st)", "wilfull?");
    
    var LB;
    var UB;
    LB = 0;
    UB = PatternAndReplaceStringArray.length - 1;
    
    var Index;
    for (Index = LB; Index <= UB; Index++) {
        var PatternAndReplaceString;
        PatternAndReplaceString = PatternAndReplaceStringArray[Index];
        
        ResultString =
            RegExpReplace(
                ResultString,
                PatternAndReplaceString,
                PatternAndReplaceString);
    }
    
    return ResultString;
}

function RegExpReplace(
    SourceString,
    ReplaceString,
    Pattern) {
    
    var re = new RegExp(Pattern, "ig"); // 4. Capitalization
    return SourceString.replace(re, ReplaceString);
}

//
// Copyright (c) 2020 Koki Takeyama
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

//
// === RegExp ===
//

//
// RegExp_Execute
// - Executes a regular expression search against a specified string.
//
// RegExp_Replace
// - Replaces text found in a regular expression search.
//
// RegExp_Test
// - Executes a regular expression search against a specified string
//   and returns a Boolean value that indicates if a pattern match was found.
//

//
// SourceString:
//   Required. The text string upon which the regular expression is executed.
//
// ReplaceString:
//   Required. The replacement text string.
//
// Pattern:
//   Required. Regular string expression being searched for.
//   https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/scripting-articles/f97kw5ka(v=vs.84)
//
// IgnoreCase:
//   Optional. The value is False if the search is case-sensitive,
//   True if it is not. Default is False.
//
// GlobalMatch:
//   Optional. The value is True if the search applies to the entire string,
//   False if it does not. Default is False.
//
// MultiLine:
//   Optional. The value is False if the search is single-line mode,
//   True if it is multi-line mode. Default is False.
//

function RegExp_Execute(
    SourceString,
    Pattern,
    IgnoreCase,
    GlobalMatch,
    MultiLine) {
    
    var flags = "";
    if (IgnoreCase) { flags = flags + "i"; }
    if (GlobalMatch) { flags = flags + "g"; }
    if (MultiLine) { flags = flags + "m"; }
    
    var re = new RegExp(Pattern, flags);
    
    return SourceString.match(re);
}

function RegExp_Replace(
    SourceString,
    ReplaceString,
    Pattern,
    IgnoreCase,
    GlobalMatch,
    MultiLine) {
    
    var flags = "";
    if (IgnoreCase) { flags = flags + "i"; }
    if (GlobalMatch) { flags = flags + "g"; }
    if (MultiLine) { flags = flags + "m"; }
    
    var re = new RegExp(Pattern, flags);
    
    return SourceString.replace(re, ReplaceString);
}

function RegExp_Test(
    SourceString,
    Pattern,
    IgnoreCase,
    MultiLine) {
    
    var flags = "";
    if (IgnoreCase) { flags = flags + "i"; }
    if (MultiLine) { flags = flags + "m"; }
    
    var re = new RegExp(Pattern, flags);
    
    return re.test(SourceString);
}

//
// --- Test ---
//

function btnReplace_OnClick() {
    var SourceString;
    SourceString = textareaSourceString.innerText;
    if (SourceString == "") {
        alert("SourceString: is blank.");
        return;
    }
    
    var Result;
    Result = GetMatchingText(SourceString);
    
    textareaResult.innerText = Result;
}
-->
</script>

</head>

<body style="margin:0">

<table width="100%">

<colgroup>
<col width="100pt"></col>
<col></col>
</colgroup>

<tr>
<td>SourceString:</td>
<td><textarea id="textareaSourceString" rows="10" cols="50" style="width:100%"></textarea></td>
</tr>

<tr>
<td></td>
<td>
<button id="btnReplace" onclick="btnReplace_OnClick();">Replace</button>
</td>
</tr>

<tr>
<td>Result:</td>
<td><textarea id="textareaResult" rows="10" cols="50" style="width:100%"></textarea></td>
</tr>

</table>

</body>

</html>
